<?php

/**
 * Form controller class
 *
 * @see https://wiki.civicrm.org/confluence/display/CRMDOC/QuickForm+Reference
 */
class CRM_eWAYRecurring_Form_Settings extends CRM_Core_Form {

  private $_settingFilter = ['group' => 'eWAYRecurring'];

  private $_settings = [];

  public function buildQuickForm() {
    $this->addFormElements();
    parent::buildQuickForm();
  }

  public function validate() {
    $submittedValues = $this->exportValues();

    if (!isset($submittedValues['eway_recurring_contribution_max_retry']) || !is_numeric($submittedValues['eway_recurring_contribution_max_retry'])) {
      $this->_errors['eway_recurring_contribution_max_retry'] = 'Retries should be a valid number';
    }

    if (!isset($submittedValues['eway_recurring_contribution_retry_delay']) || !is_numeric($submittedValues['eway_recurring_contribution_retry_delay'])) {
      $this->_errors['eway_recurring_contribution_retry_delay'] = 'Retry delay should be a valid number';
    }

    return parent::validate(); // TODO: Change the autogenerated stub
  }

  /**
   * Add form elements
   */
  public function addFormElements() {
    $settings = $this->getFormSettings();

    foreach ($settings as $name => $setting) {
      if (isset($setting['quick_form_type'])) {
        $add = 'add' . $setting['quick_form_type'];
        if ($add == 'addElement') {
          $this->$add($setting['html_type'], $name, $setting['title'], $setting['html_attributes'] ?? [], TRUE);
        }
        elseif ($setting['html_type'] == 'Select') {
          $optionValues = [];
          if (!empty($setting['pseudoconstant']) && !empty($setting['pseudoconstant']['optionGroupName'])) {
            $optionValues = CRM_Core_OptionGroup::values($setting['pseudoconstant']['optionGroupName'], FALSE, FALSE, FALSE, NULL, 'name');
          }
          elseif (!empty($setting['pseudoconstant']) && !empty($setting['pseudoconstant']['callback'])) {
            $callBack = Civi\Core\Resolver::singleton()
              ->get($setting['pseudoconstant']['callback']);
            $optionValues = call_user_func_array($callBack, $optionValues);
          }
          $this->add('select', $setting['name'], $setting['title'], $optionValues, FALSE, $setting['html_attributes']);
        }
        else {
          $this->$add($name, $setting['title'], []);
        }
      }
    }

    $this->assign('elementNames', $this->getRenderableElementNames());

    $this->addButtons([
      [
        'type' => 'submit',
        'name' => ts('Submit'),
        'isDefault' => TRUE,
      ],
    ]);

  }

  /**
   * Get the settings we are going to allow to be set on this form.
   *
   * @return array
   */
  public function getFormSettings() {
    if (empty($this->_settings)) {
      $settings = civicrm_api3('setting', 'getfields', ['filters' => $this->_settingFilter]);
      $settings = $settings['values'];
      $this->_settings = $settings;
    }
    return $this->_settings;
  }

  /**
   * Handles the form submission.
   */
  public function postProcess() {
    $this->_submittedValues = $this->exportValues();

    $this->saveSettings();
    CRM_Utils_System::redirect($_SERVER['REQUEST_URI']);

    parent::postProcess();
  }

  /**
   * Save the settings in database.
   *
   * @return array
   */
  public function saveSettings() {
    $settings = $this->getFormSettings();
    $values = array_intersect_key($this->_submittedValues, $settings);
    civicrm_api3('setting', 'create', $values);
    return $settings;
  }

  /**
   * Set defaults for form.
   *
   * @see CRM_Core_Form::setDefaultValues()
   */
  public function setDefaultValues() {
    $existing = civicrm_api3('setting', 'get', ['return' => array_keys($this->getFormSettings())]);
    $defaults = [];
    $domainID = CRM_Core_Config::domainID();
    foreach ($existing['values'][$domainID] as $name => $value) {
      $defaults[$name] = $value;
    }
    return $defaults;
  }

  /**
   * Get the fields/elements defined in this form.
   *
   * @return array (string)
   */
  public function getRenderableElementNames() {
    $elementNames = [];
    foreach ($this->_elements as $element) {
      $label = $element->getLabel();
      if (!empty($label)) {
        $elementNames[] = [
          "name" => $element->getName(),
          "description" => (isset($this->_settings[$element->getName()]["description"])) ? $this->_settings[$element->getName()]["description"] : '',
        ];
      }
    }
    return $elementNames;
  }

}
